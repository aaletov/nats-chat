// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api.proto

package generated

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NatsChatServerClient is the client API for NatsChatServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NatsChatServerClient interface {
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Address(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	Online(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Chat(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Send(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*empty.Empty, error)
}

type natsChatServerClient struct {
	cc grpc.ClientConnInterface
}

func NewNatsChatServerClient(cc grpc.ClientConnInterface) NatsChatServerClient {
	return &natsChatServerClient{cc}
}

func (c *natsChatServerClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.NatsChatServer/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natsChatServerClient) Address(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, "/api.NatsChatServer/Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natsChatServerClient) Online(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.NatsChatServer/Online", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natsChatServerClient) Chat(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.NatsChatServer/Chat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natsChatServerClient) Send(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.NatsChatServer/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NatsChatServerServer is the server API for NatsChatServer service.
// All implementations must embed UnimplementedNatsChatServerServer
// for forward compatibility
type NatsChatServerServer interface {
	Generate(context.Context, *GenerateRequest) (*empty.Empty, error)
	Address(context.Context, *AddressRequest) (*AddressResponse, error)
	Online(context.Context, *empty.Empty) (*empty.Empty, error)
	Chat(context.Context, *empty.Empty) (*empty.Empty, error)
	Send(context.Context, *ChatMessage) (*empty.Empty, error)
	mustEmbedUnimplementedNatsChatServerServer()
}

// UnimplementedNatsChatServerServer must be embedded to have forward compatible implementations.
type UnimplementedNatsChatServerServer struct {
}

func (UnimplementedNatsChatServerServer) Generate(context.Context, *GenerateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedNatsChatServerServer) Address(context.Context, *AddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Address not implemented")
}
func (UnimplementedNatsChatServerServer) Online(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Online not implemented")
}
func (UnimplementedNatsChatServerServer) Chat(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedNatsChatServerServer) Send(context.Context, *ChatMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedNatsChatServerServer) mustEmbedUnimplementedNatsChatServerServer() {}

// UnsafeNatsChatServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NatsChatServerServer will
// result in compilation errors.
type UnsafeNatsChatServerServer interface {
	mustEmbedUnimplementedNatsChatServerServer()
}

func RegisterNatsChatServerServer(s grpc.ServiceRegistrar, srv NatsChatServerServer) {
	s.RegisterService(&NatsChatServer_ServiceDesc, srv)
}

func _NatsChatServer_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsChatServerServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NatsChatServer/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsChatServerServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatsChatServer_Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsChatServerServer).Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NatsChatServer/Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsChatServerServer).Address(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatsChatServer_Online_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsChatServerServer).Online(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NatsChatServer/Online",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsChatServerServer).Online(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatsChatServer_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsChatServerServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NatsChatServer/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsChatServerServer).Chat(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatsChatServer_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsChatServerServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NatsChatServer/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsChatServerServer).Send(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// NatsChatServer_ServiceDesc is the grpc.ServiceDesc for NatsChatServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NatsChatServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.NatsChatServer",
	HandlerType: (*NatsChatServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _NatsChatServer_Generate_Handler,
		},
		{
			MethodName: "Address",
			Handler:    _NatsChatServer_Address_Handler,
		},
		{
			MethodName: "Online",
			Handler:    _NatsChatServer_Online_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _NatsChatServer_Chat_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _NatsChatServer_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// NatsChatClientClient is the client API for NatsChatClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NatsChatClientClient interface {
	Send(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*empty.Empty, error)
}

type natsChatClientClient struct {
	cc grpc.ClientConnInterface
}

func NewNatsChatClientClient(cc grpc.ClientConnInterface) NatsChatClientClient {
	return &natsChatClientClient{cc}
}

func (c *natsChatClientClient) Send(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.NatsChatClient/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NatsChatClientServer is the server API for NatsChatClient service.
// All implementations must embed UnimplementedNatsChatClientServer
// for forward compatibility
type NatsChatClientServer interface {
	Send(context.Context, *ChatMessage) (*empty.Empty, error)
	mustEmbedUnimplementedNatsChatClientServer()
}

// UnimplementedNatsChatClientServer must be embedded to have forward compatible implementations.
type UnimplementedNatsChatClientServer struct {
}

func (UnimplementedNatsChatClientServer) Send(context.Context, *ChatMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedNatsChatClientServer) mustEmbedUnimplementedNatsChatClientServer() {}

// UnsafeNatsChatClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NatsChatClientServer will
// result in compilation errors.
type UnsafeNatsChatClientServer interface {
	mustEmbedUnimplementedNatsChatClientServer()
}

func RegisterNatsChatClientServer(s grpc.ServiceRegistrar, srv NatsChatClientServer) {
	s.RegisterService(&NatsChatClient_ServiceDesc, srv)
}

func _NatsChatClient_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsChatClientServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NatsChatClient/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsChatClientServer).Send(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// NatsChatClient_ServiceDesc is the grpc.ServiceDesc for NatsChatClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NatsChatClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.NatsChatClient",
	HandlerType: (*NatsChatClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _NatsChatClient_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
